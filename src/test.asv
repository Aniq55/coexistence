clc;

clear all;

%% Define all constants

% Environment
L = 10*1e3;     % 10 km
alpha = 3.0;      % path-loss coefficient

% Incumbent Users
lambda_z = 1/1e6;
rho = 100;      % radius of the exclusion zone
p_z = 1;        % transmit power

% Cellular Network
lambda_c = 30/1e6;
p_c = 0.5;        % transmit power
noise_c= 1e-15; % receiver thermal noise
delta_c = 0.5;
bar_lambda_c = lambda_c*exp(-pi*lambda_z*rho^2);


% WiFi Network
lambda_w = 40/1e6;
rho_w = 20;     % radius of the WiFi PCP disk
p_w = 0.1;        % transmit power
noise_w= 1e-15; % receiver thermal noise
delta_w = 0.5;
bar_lambda_w = lambda_w*exp(-pi*lambda_z*rho^2);
prob_R_w = makedist('Triangular','a',0,'b',rho_w,'c',rho_w);

%% Simulation

n_iterations = 1000;

SINR_cL_list = [];

nearest_BS_L_list = [];

for iter = 1:n_iterations
    
    % Point Deployment:



    %   2. Phi_c
    [Xc, Yc] = PPP_gen_xy(lambda_c, L, L);
    n_c = length(Xc);


    %   3. Phi_c^U
    XcU = [];
    YcU = [];

    %   4. Phi_c^L
    XcL = [];
    YcL = [];


    for i=1:n_c
        if sum ( sqrt((Xz - Xc(i)).^2 + (Yz - Yc(i)).^2) < rho) == 0
            % the point i lies out of an exclusion zone

            if rand < delta_c
                XcU = [XcU; Xc(i)];
                YcU = [YcU; Yc(i)];
            else
                XcL = [XcL; Xc(i)];
                YcL = [YcL; Yc(i)];
            end

        else
            XcL = [XcL; Xc(i)];
            YcL = [YcL; Yc(i)];
        end
    end
    
    n_cU = length(XcU);
    n_cL = length(XcL);


    %   5. Phi_w
    [Xw, Yw] = PPP_gen_xy(lambda_w, L, L);
    n_w = length(Xw);

    %   6. Phi_w^U
    XwU = [];
    YwU = [];

    %   7. Phi_w^L
    XwL = [];
    YwL = [];


    for i=1:n_w
        if sum ( sqrt((Xz - Xw(i)).^2 + (Yz - Yw(i)).^2) < rho) == 0
            % the point i lies out of an exclusion zone

            if rand < delta_w
                XwU = [XwU; Xw(i)];
                YwU = [YwU; Yw(i)];
            else
                XwL = [XwL; Xw(i)];
                YwL = [YwL; Yw(i)];
            end

        else
            XwL = [XwL; Xw(i)];
            YwL = [YwL; Yw(i)];
        end
    end
    
    n_wU = length(XwU);
    n_wL = length(XwL);
    
    
    
    % Distance from Origin (user)    
    R_cL = abs(XcL + 1j*YcL);
    
    C0_L_index = find(R_cL == min(R_cL));
    nearest_BS_L_list= [nearest_BS_L_list; min(R_cL) ];
        
 
    % Interference Vectors
    I_cL = p_c*exprnd(1, n_cL, 1).*R_cL.^(-alpha);
    
    
    % Power from associated Points
    P_c0_L = I_cL(C0_L_index);
    
    
   


    % Licensed
    % 1. I_cL_total
    I_cL_total = sum(I_cL) - P_c0_L;
    SINR_cL = P_c0_L/(noise_c + I_cL_total);
    SINR_cL_list = [SINR_cL_list; SINR_cL];
    
    % 2. I_wL_total
    I_wL_total = sum(I_wL);
    SINR_wL = P_w0_L/(noise_w + I_wL_total);
    SINR_wL_list = [SINR_wL_list; SINR_wL];
    
end

% Store the CDFs
[P_cU_sim, SINR_cU_range] = ecdf(SINR_cU_list);
[P_cL_sim, SINR_cL_range] = ecdf(SINR_cL_list);
[P_wU_sim, SINR_wU_range] = ecdf(SINR_wU_list);
[P_wL_sim, SINR_wL_range] = ecdf(SINR_wL_list);